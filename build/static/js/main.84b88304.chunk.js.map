{"version":3,"sources":["redux/util/apiThunkHelper.js","redux/services/services.action.js","redux/services/services.reducer.js","components/header/header.jsx","App.js","serviceWorker.js","index.js","redux/store/store.js"],"names":["FaultTypes","ServicesActionTypes","BEGIN","SUCCESS","FAILURE","INITIAL_STATE","Immutable","data","isLoading","isLoaded","state","payload","type","set","Header","brandText","brandMark","className","src","alt","displayName","App","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","createStore","serviceReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRACaA,G,iBACE,aCAFC,EACW,CAChBC,MAAO,2BACPC,QAAS,6BACTC,QAAS,8BCFJC,EAAgB,IAAIC,IAAU,CACvCC,KAAM,GACNC,WAAW,EACXC,UAAU,IAGC,aAAkD,IAAjDC,EAAgD,uDAAxCL,EAAwC,6CAAxBM,eAAwB,MAAd,GAAc,EAAVC,EAAU,EAAVA,KAClD,OAAQA,GACJ,KAAKX,EAAuCC,MACxC,OAAOQ,EACFG,IAAI,aAAa,GACjBA,IAAI,YAAY,GACzB,KAAKZ,EAAuCE,QACxC,OAAOO,EACFG,IAAI,MAAOF,GACXE,IAAI,aAAa,GACjBA,IAAI,YAAY,GAEzB,KAAKb,EACO,OAAOU,EACFG,IAAI,YAAY,GAChBA,IAAI,aAAa,GAClC,QACI,OAAOH,I,gBCvBbI,EAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,UAAb,OACX,4BAAQC,UAAU,YACd,6BACI,yBAAKA,UAAU,uBACVD,GAAa,yBAAKE,IAAKF,EAAWG,IAAKJ,KAE5C,yBAAKE,UAAU,uBAAuBF,MAKlDD,EAAOM,YAAc,SAYNN,QCfAO,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CAAQF,UAAU,qB,MCKJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,CAAUC,MCJX,WAA0C,IAAlBC,EAAiB,uDAAJ,GACnD,OAAOC,YACJC,EACDF,EACAG,YAAgBC,MDAcC,IAAkB,kBAAC,EAAD,OAC7CC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.84b88304.chunk.js","sourcesContent":["import axios from 'axios';\nexport const FaultTypes = {\n    API_FAULT: 'API_FAULT'\n};\n\nexport const ApiFault = (fault, requestObject) => {\n    return {\n        type: FaultTypes.API_FAULT,\n        payload: fault,\n        requestObject\n    };\n};\n\nconst thunkHelper = async (dispatch, {BEGIN, SUCCESS}, config, requestObject) => {\n    dispatch({\n        type: BEGIN,\n        requestObject\n    });\n\n    let result;\n\n    try {\n        result = await axios(config);\n    } catch (err) {\n        const fault = {\n            resposnse:err.response,\n            trigger: BEGIN\n        };\n\n        dispatch(ApiFault(fault, requestObject));\n\n        throw fault;\n    }\n\n    const {data} = result;\n\n    if (data.Fault) {\n        if (data.Fault.Code === 1) {\n            dispatch({\n                type: SUCCESS,\n                payload: {},\n                requestObject\n            });\n\n            return;\n        }\n\n        const fault = {\n            fault: data.Fault,\n            trigger: BEGIN\n        };\n\n        dispatch(ApiFault(fault, requestObject));\n\n        throw fault;\n    }\n\n    dispatch({\n        type: SUCCESS,\n        payload: data,\n        requestObject\n    });\n\n    return data;\n};\n\nexport const apiThunkHelper = (dispatch, url, types, requestObject) => {\n\n    const apiConfig = {\n        method: 'post',\n        data: requestObject,\n        url: url\n    };\n\n    return thunkHelper(dispatch, types, apiConfig, requestObject);\n};","import {apiThunkHelper} from '../util/apiThunkHelper';\n\nexport const ServicesActionTypes = {\n    RETRIEVE_SERVICESS: {\n        BEGIN: 'RETRIEVE_SERVICESS.BEGIN',\n        SUCCESS: 'RETRIEVE_SERVICESS.SUCCESS',\n        FAILURE: 'RETRIEVE_SERVICESS.FAILURE'\n    }\n};\n\nconst servicesUrl = '';\n\nexport const RetrieveServices = () => {\n    return (dispatch, getState) => {\n        return apiThunkHelper(dispatch, servicesUrl, ServicesActionTypes.RETRIEVE_SERVICESS, {\n            method: 'post',\n            url: ''\n        });\n    };\n};","// import path from 'ramda/src/path';\nimport Immutable from 'seamless-immutable';\nimport {ServicesActionTypes} from '../services/services.action';\nimport {FaultTypes} from '../util/apiThunkHelper';\nexport const INITIAL_STATE = new Immutable({\n    data: [],\n    isLoading: false,\n    isLoaded: false\n});\n\nexport default (state = INITIAL_STATE, {payload = {}, type}) => {\n    switch (type) {\n        case ServicesActionTypes.RETRIEVE_SERVICESS.BEGIN:\n            return state\n                .set('isLoading', true)\n                .set('isLoaded', false);\n        case ServicesActionTypes.RETRIEVE_SERVICESS.SUCCESS:\n            return state\n                .set('tfl', payload)\n                .set('isLoading', false)\n                .set('isLoaded', true);\n\n        case FaultTypes.API_FAULT:\n                    return state\n                        .set('isLoaded', true)\n                        .set('isLoading', false);      \n        default:\n            return state;\n    }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './header.scss';\n\nconst Header = ({brandText, brandMark}) => (\n    <header className=\"c-header\">\n        <div>\n            <div className=\"c-header__brandMark\">\n                {brandMark && <img src={brandMark} alt={brandText} />}\n            </div>\n            <div className=\"c-header__brandText\">{brandText}</div>\n        </div>\n    </header>\n);\n\nHeader.displayName = 'Header';\nHeader.propTypes = {\n    /** Header text to be displayed */\n    brandText: PropTypes.string,\n    /** The image for the brand */\n    brandMark: PropTypes.node,\n    /* Menu Items */\n    menuItems: PropTypes.arrayOf(PropTypes.shape({\n    })),\n};\n\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header brandText=\"Welcome to TFL\"></Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from '../src/redux/store/store';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={configureStore()}><App /></Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport serviceReducer from '../services/services.reducer';\n\nexport default function configureStore(initialState={}) {\n return createStore(\n    serviceReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}