{"ast":null,"code":"// import path from 'ramda/src/path';\nimport Immutable from 'seamless-immutable';\nimport { FaultTypes } from '../util/apiThunkHelper';\nimport { SearchActionTypes } from './search.action';\nexport const INITIAL_STATE = new Immutable({\n  routes: [],\n  isLoading: false,\n  isLoaded: false\n});\nexport default ((state = INITIAL_STATE, {\n  payload = {},\n  type\n}) => {\n  switch (type) {\n    case SearchActionTypes.SEARCH.BEGIN:\n      return state.set('isLoading', true).set('isLoaded', false);\n\n    case SearchActionTypes.SEARCH.SUCCESS:\n      return state.set('routes', payload).set('isLoading', false).set('isLoaded', true);\n\n    case FaultTypes.API_FAULT:\n      return state.set('routesFault', payload).set('isLoaded', true).set('isLoading', false);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/chak05/TFL/src/redux/search/search.reducer.js"],"names":["Immutable","FaultTypes","SearchActionTypes","INITIAL_STATE","routes","isLoading","isLoaded","state","payload","type","SEARCH","BEGIN","set","SUCCESS","API_FAULT"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,iBAAR,QAAgC,iBAAhC;AACA,OAAO,MAAMC,aAAa,GAAG,IAAIH,SAAJ,CAAc;AACvCI,EAAAA,MAAM,EAAE,EAD+B;AAEvCC,EAAAA,SAAS,EAAE,KAF4B;AAGvCC,EAAAA,QAAQ,EAAE;AAH6B,CAAd,CAAtB;AAMP,gBAAe,CAACC,KAAK,GAAGJ,aAAT,EAAwB;AAACK,EAAAA,OAAO,GAAG,EAAX;AAAeC,EAAAA;AAAf,CAAxB,KAAiD;AAC5D,UAAQA,IAAR;AACI,SAAKP,iBAAiB,CAACQ,MAAlB,CAAyBC,KAA9B;AACI,aAAOJ,KAAK,CACPK,GADE,CACE,WADF,EACe,IADf,EAEFA,GAFE,CAEE,UAFF,EAEc,KAFd,CAAP;;AAGJ,SAAKV,iBAAiB,CAACQ,MAAlB,CAAyBG,OAA9B;AACI,aAAON,KAAK,CACPK,GADE,CACE,QADF,EACYJ,OADZ,EAEFI,GAFE,CAEE,WAFF,EAEe,KAFf,EAGFA,GAHE,CAGE,UAHF,EAGc,IAHd,CAAP;;AAIJ,SAAKX,UAAU,CAACa,SAAhB;AACY,aAAOP,KAAK,CACPK,GADE,CACE,aADF,EACiBJ,OADjB,EAEFI,GAFE,CAEE,UAFF,EAEc,IAFd,EAGFA,GAHE,CAGE,WAHF,EAGe,KAHf,CAAP;;AAIZ;AACI,aAAOL,KAAP;AAhBR;AAkBH,CAnBD","sourcesContent":["// import path from 'ramda/src/path';\nimport Immutable from 'seamless-immutable';\nimport {FaultTypes} from '../util/apiThunkHelper';\nimport {SearchActionTypes} from './search.action';\nexport const INITIAL_STATE = new Immutable({\n    routes: [],\n    isLoading: false,\n    isLoaded: false\n});\n\nexport default (state = INITIAL_STATE, {payload = {}, type}) => {\n    switch (type) {\n        case SearchActionTypes.SEARCH.BEGIN:\n            return state\n                .set('isLoading', true)\n                .set('isLoaded', false);\n        case SearchActionTypes.SEARCH.SUCCESS:\n            return state\n                .set('routes', payload)\n                .set('isLoading', false)\n                .set('isLoaded', true);\n        case FaultTypes.API_FAULT:\n                    return state\n                        .set('routesFault', payload)\n                        .set('isLoaded', true)\n                        .set('isLoading', false);      \n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}