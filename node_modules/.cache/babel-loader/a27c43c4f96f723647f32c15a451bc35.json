{"ast":null,"code":"import pathOr from 'ramda/src/pathOr';\nimport sort from 'ramda/src/sort';\nimport { createSelector } from 'reselect';\nexport const ServicesClient = store => {\n  return pathOr([], ['servicesClient'], store);\n};\nexport const ServicesItems = createSelector([ServicesClient], services => {\n  return pathOr([], ['services'], services);\n});\nexport const ServicesItemsIsLoading = createSelector([ServicesClient], services => {\n  return pathOr([], ['isLoading'], services);\n});\nexport const SortedServicesItems = createSelector([ServicesItems], servicesItems => {\n  if (servicesItems && servicesItems.length) {\n    return sort((a, b) => a && a.name.localeCompare(b.name), sort((a, b) => a && a.modeName.localeCompare(b.modeName), servicesItems));\n  }\n});\nexport const ServicesItemsIsLoaded = createSelector([ServicesItems, ServicesItemsIsLoading], (searchResults, isLoading) => {\n  return searchResults !== [] && !isLoading;\n});\nexport const Fault = createSelector([], store => {\n  return pathOr(null, ['fault'], store);\n});","map":{"version":3,"sources":["/Users/chak05/TFL/src/redux/services/services.selectors.js"],"names":["pathOr","sort","createSelector","ServicesClient","store","ServicesItems","services","ServicesItemsIsLoading","SortedServicesItems","servicesItems","length","a","b","name","localeCompare","modeName","ServicesItemsIsLoaded","searchResults","isLoading","Fault"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAOJ,MAAM,CAAC,EAAD,EAAK,CAAC,gBAAD,CAAL,EAAyBI,KAAzB,CAAb;AACH,CAFM;AAMP,OAAO,MAAMC,aAAa,GAAGH,cAAc,CAAC,CACxCC,cADwC,CAAD,EAEvCG,QAAD,IAAc;AACb,SAAON,MAAM,CAAC,EAAD,EAAK,CAAC,UAAD,CAAL,EAAmBM,QAAnB,CAAb;AACH,CAJ0C,CAApC;AAMP,OAAO,MAAMC,sBAAsB,GAAGL,cAAc,CAAC,CACjDC,cADiD,CAAD,EAEhDG,QAAD,IAAc;AACb,SAAON,MAAM,CAAC,EAAD,EAAK,CAAC,WAAD,CAAL,EAAoBM,QAApB,CAAb;AACH,CAJmD,CAA7C;AAMP,OAAO,MAAME,mBAAmB,GAAGN,cAAc,CAAC,CAC9CG,aAD8C,CAAD,EAE7CI,aAAD,IAAmB;AAClB,MAAGA,aAAa,IAAIA,aAAa,CAACC,MAAlC,EAAyC;AACrC,WAAOT,IAAI,CAAC,CAACU,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIA,CAAC,CAACE,IAAF,CAAOC,aAAP,CAAqBF,CAAC,CAACC,IAAvB,CAAhB,EAA8CZ,IAAI,CAAC,CAACU,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIA,CAAC,CAACI,QAAF,CAAWD,aAAX,CAAyBF,CAAC,CAACG,QAA3B,CAAhB,EAAsDN,aAAtD,CAAlD,CAAX;AACH;AACJ,CANgD,CAA1C;AAQP,OAAO,MAAMO,qBAAqB,GAAGd,cAAc,CAAC,CAChDG,aADgD,EAEhDE,sBAFgD,CAAD,EAGhD,CAACU,aAAD,EAAgBC,SAAhB,KAA8B;AAC7B,SAAOD,aAAa,KAAK,EAAlB,IAAwB,CAACC,SAAhC;AACH,CALkD,CAA5C;AAOP,OAAO,MAAMC,KAAK,GAAGjB,cAAc,CAAC,EAAD,EAC/BE,KAAD,IAAW;AACV,SAAOJ,MAAM,CAAC,IAAD,EAAO,CAAC,OAAD,CAAP,EAAkBI,KAAlB,CAAb;AACH,CAHkC,CAA5B","sourcesContent":["import pathOr from 'ramda/src/pathOr';\nimport sort from 'ramda/src/sort';\nimport {createSelector} from 'reselect';\n\nexport const ServicesClient = (store) => {\n    return pathOr([], ['servicesClient'], store);\n};\n\n\n\nexport const ServicesItems = createSelector([\n    ServicesClient\n], (services) => {\n    return pathOr([], ['services'], services);\n});\n\nexport const ServicesItemsIsLoading = createSelector([\n    ServicesClient\n], (services) => {\n    return pathOr([], ['isLoading'], services);\n});\n\nexport const SortedServicesItems = createSelector([\n    ServicesItems\n], (servicesItems) => {\n    if(servicesItems && servicesItems.length){\n        return sort((a, b) => a && a.name.localeCompare(b.name), sort((a, b) => a && a.modeName.localeCompare(b.modeName), servicesItems));\n    }\n});\n\nexport const ServicesItemsIsLoaded = createSelector([\n    ServicesItems,\n    ServicesItemsIsLoading\n], (searchResults, isLoading) => {\n    return searchResults !== [] && !isLoading;\n});\n\nexport const Fault = createSelector([\n], (store) => {\n    return pathOr(null, ['fault'], store);\n});"]},"metadata":{},"sourceType":"module"}